import paramiko, re
import logging
import cream_testsuite_conf
import testsuite_utils

class BatchSysMngError(Exception):
    """ Abstract Class to manage exception of batch system management module."""
    pass

class BatchCmdError(BatchSysMngError):
    """ Class to manage errors generated by batch system commands.

        Attributes:
            data -- input data
            msg  -- error message
    """

    def __init__(self, msg):
        self.msg = msg
 
    def __str__(self):
        return str(self.msg)

class JobNotFoundError(BatchSysMngError):
    """ Class to manage errors generated by batch system commands.

        Attributes:
            data -- input data
            msg  -- error message
    """

    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return str(self.msg)

################################
## AbstractBatchSystem        ##
################################
class AbstractBatchSystem(object):

    """Abstract class to manage different batch systems"""

    def __init__(self):
        pass
# Public interface

    def del_job_from_batch_id(self, batch_id):
        pass

    def __del__(self):
        pass

# Private functions

    def get_batch_jid_from_cream_jid(self, cream_id):
        pass


################################
## LSFBatchSys                ##
################################

class LSFBatchSys(AbstractBatchSystem):
    """Class to manage LSF batch systems"""
 
    ssh_connection = paramiko.SSHClient()

    def __init__(self):

        self.my_log = logging.getLogger('LSFBatchSys')
        self.my_conf = cream_testsuite_conf.CreamTestsuiteConfSingleton()
        lsf_host = self.my_conf.getParam('batch_system','batch_master_host')
        lsf_admin = self.my_conf.getParam('batch_system','batch_master_admin')
        lsf_pass = self.my_conf.getParam('batch_system','batch_master_admin_password')
        print "Get ssh connection with cream ce to manage batch system commands"
        self.ssh_connection.set_missing_host_key_policy(paramiko.AutoAddPolicy())  #don't ask for acceptance of foreign host key (auto accept)
        self.ssh_connection.connect(lsf_host, username=lsf_admin, password=lsf_pass)

# Public interface

    def __del__(self):
        self.ssh_connection.close()

    def del_job_from_batch_id(self, lsf_jid):

        stdin, stdout, stderr = self.ssh_connection.exec_command("bkill " + lsf_jid)

        error = stderr.readlines()
        if error != []:
            raise BatchCmdError(error)

        print "Cream job with lsf jid " + lsf_jid + " has been deleted!"


    def del_job_from_cream_id(self, cream_id):
        
        lsf_job_id = self.get_batch_jid_from_cream_jid(cream_id)
        self.del_job_from_batch_id(lsf_job_id)       

# Private functions

    def get_batch_jid_from_cream_jid(self, cream_id):

        print "CREAM Job ID is: " + cream_id
        cream_num_jid = cream_id.split("CREAM")[1]

        stdin, stdout, stderr = self.ssh_connection.exec_command("qstat -al")

        error = stderr.readlines()
        if error != []:
            raise BatchCmdError(error)

        output = stdout.read()

        lsf_jid = "not_set"
        for line in output.split('\n'):
                if cream_num_jid in line:
                        m = re.search('(?<=; Id = ).*', line)
                        lsf_jid = m.group(0)

        if lsf_jid is "not_set":
                raise JobNotFoundError("Cream job with jid " + cream_id + " has not been found on the LSF server! (`qstat -al` didn't report it)")

        return lsf_jid



################################
## PBSBatchSys                ##
################################

class PBSBatchSys(AbstractBatchSystem):
    """Class to manage PBS-Torque batch systems"""

    ssh_connection = paramiko.SSHClient() 
  
    def __init__(self):

        self.my_log = logging.getLogger('PBSBatchSys')
        self.my_conf = cream_testsuite_conf.CreamTestsuiteConfSingleton()
        torque_host = self.my_conf.getParam('batch_system','batch_master_host')
        torque_admin = self.my_conf.getParam('batch_system','batch_master_admin')
        torque_pass = self.my_conf.getParam('batch_system','batch_master_admin_password')
        print "torque_host " + torque_host
        print "torque_admin " + torque_admin
        print "torque_pass " + torque_pass
        print "Get ssh connection with cream ce to manage batch system commands"
        self.ssh_connection.set_missing_host_key_policy(paramiko.AutoAddPolicy())  #don't ask for acceptance of foreign host key (auto accept)
        self.ssh_connection.connect(torque_host, username=torque_admin, password=torque_pass)

# Public interface

    def __del__(self):
        self.ssh_connection.close()

    def del_job_from_batch_id(self, torque_jid):

        stdin, stdout, stderr = self.ssh_connection.exec_command("qdel " + torque_jid)

        error = stderr.readlines()
        if error != []:
            raise BatchCmdError(error)
       
        print "Cream job with torque jid " + torque_jid + " has been deleted!"


    def del_job_from_cream_id(self, cream_id):
        
        torque_job_id = self.get_batch_jid_from_cream_jid(cream_id)
        self.del_job_from_batch_id(torque_job_id)       

# Private functions

    def get_batch_jid_from_cream_jid(self, cream_id):

        print "CREAM Job ID is: " + cream_id
        cream_num_jid = cream_id.split("CREAM")[1]
        print "CREAM Numeric Job Identifier is: " + cream_num_jid

        print "Verify if job " + cream_num_jid + " exists using qstat"
        stdin, stdout, stderr = self.ssh_connection.exec_command("qstat")

        error = stderr.readlines()
        if error != []:
            raise BatchCmdError(error)

        output = stdout.read()

        torque_jid = "not_set"
        for line in output.split('\n'):
                if cream_num_jid in line:
                        torque_jid = line.split(' ')[0]
                        torque_jid = torque_jid.split('.')[0]
                        print "TORQUE jid is: " + torque_jid

        if torque_jid is "not_set":
                raise JobNotFoundError("Cream job with jid " + cream_id + " has not been found on the Torque server! (qstat didn't report it)")

        return torque_jid

################################
## SLURMBatchSys                ##
################################

class SLURMBatchSys(AbstractBatchSystem):
    """Class to manage SLURM-Torque batch systems"""

    my_utility = testsuite_utils.CommandMng()
  
    def __init__(self):

        self.my_log = logging.getLogger('SLURMBatchSys')
        self.my_conf = cream_testsuite_conf.CreamTestsuiteConfSingleton()
        self.slurm_host = self.my_conf.getParam('batch_system','batch_master_host')
        print "slurm_host " + self.slurm_host

# Public interface

    #def __del__(self):

    def del_job_from_batch_id(self, slurm_jid):

        stdout, stderr = self.my_utility.exec_remote_command("scancel " + slurm_jid)

        error = stderr
        if error != "":
            raise BatchCmdError(error)
       
        print "Cream job with slurm jid " + slurm_jid + " has been deleted!"


    def del_job_from_cream_id(self, cream_id):
        
        slurm_job_id = self.get_batch_jid_from_cream_jid(cream_id)
        self.del_job_from_batch_id(slurm_job_id)       

# Private functions

    def get_batch_jid_from_cream_jid(self, cream_id):

        print "CREAM Job ID is: " + cream_id
        cream_num_jid = cream_id.split("CREAM")[1]
        print "CREAM Numeric Job Identifier is: " + cream_num_jid

        print "Verify if job " + cream_num_jid + " exists using squeue"
        stdout, stderr = self.my_utility.exec_remote_command("squeue -o \"%i %a %j\"")

        error = stderr
        if stderr != "":
            print "self.my_utility.exec_remote_command(\"squeue -o \\\"%i %a %j\\\"\") returns error!"
            raise BatchCmdError(error)

        output = stdout
        slurm_jid = "not_set"
        for line in output.split('\n'):
                if cream_num_jid in line:
                        slurm_jid = line.split(' ')[0]
                        print "slurm jid is: " + slurm_jid
        
        if slurm_jid is "not_set":
                print "SLURM ID not found"
                raise JobNotFoundError("Cream job with jid " + cream_id + " has not been found on the SLURM server! (squeue didn't report it)")

        print "Return slurm id = " + slurm_jid
        return slurm_jid


################################
## BatchSystemFactory         ##
################################

class BatchSystemFactory:

    def __init__(self, batch_sys):
        self.batch_sys = batch_sys

    def getBatchSystemMng(self):

        my_batch_sys = AbstractBatchSystem()

        if self.batch_sys == "lsf":
            print "Get batch sys mng for %s" % self.batch_sys 
            my_batch_sys = LSFBatchSys()
            return my_batch_sys
        elif self.batch_sys == "pbs":
            print "Get batch sys mng for %s" % self.batch_sys 
            my_batch_sys = PBSBatchSys()
            return my_batch_sys
        elif self.batch_sys == "slurm":
            print "Get batch sys mng for %s" % self.batch_sys
            my_batch_sys = SLURMBatchSys()
            return my_batch_sys


        return batch_sys + "batch system not supported"
